library(dplyr)
library(ggplot2)
library(dplyr)
library(ggplot2)
summary(diamonds)
summary(cars)
diamonds  %>% group_by(carat)
diamonds  %>% group_by(carat)  %>%  filter (cut = "Premium")
diamonds  %>% group_by(carat)  %>%  filter (cut == "Premium")
diamonds  %>% group_by(carat)  %>%  filter (cut == "Good")
diamonds  %>% group_by(carat)  %>%  filter (cut == "Good")  %>% cols(3)
diamonds  %>% group_by(carat)  %>%  filter (cut == "Good")  %>% cols("carat")
diamonds  %>% group_by(carat)  %>%  filter (cut == "Good")  %>% columns(1:3)
diamonds  %>% group_by(carat)  %>%  filter (cut == "Good")  %>% columns(1to3)
diamonds  %>% group_by(carat)  %>%  filter (cut == "Good")  %>% columns("carat","cut","depth")
diamonds  %>% group_by(carat)  %>%  filter (cut == "Good")  %>% columns("carat","cut","depth")
library(dplyr)
library(ggplot2)
library(tidyr)
library(readr)
setwd("D:/Github/R_DataExperiments/Exp1_Product_Brands")
products <- tbl_df(read.csv("refine_original.csv",stringsAsFactors=FALSE))
phil <- products %>% filter(grepl("^[pPfF])",company))  %>% mutate(company = "philips")
phil <- products %>% filter(grepl("^[pP|fF])",company))  %>% mutate(company = "philips")
phil <- products %>% filter(grepl("^[pP]|^[fF])",company))  %>% mutate(company = "philips")
phil <- products %>% filter(grepl("^[fF])",company))  %>% mutate(company = "philips")
View(products)
phil <- products %>% filter(grepl("^[f])",company))  %>% mutate(company = "philips")
phil <- products %>% filter(grepl("[fF])",company)) %>% mutate(company = "philips")
phil <- products %>% filter(grepl("^(fF)",company)) %>% mutate(company = "philips")
phil <- products %>% filter(grepl("^(f|F)",company)) %>% mutate(company = "philips")
phil <- products %>% filter(grepl("^(p|P|f|F)",company)) %>% mutate(company = "philips")
akzo <- products %>% filter(grepl("^(a|A)",company)) %>% mutate(company = "akzo")
vanh <- products %>% filter(grepl("^(v|V)",company)) %>% mutate(company = "van houten")
univ <- products %>% filter(grepl("^(u|U)",company)) %>% mutate(company = "unilever")
products2 <- rbind(univ,akzo)
products2 <- rbind(products2,phil)
products2 <- rbind(products2,vanh)
products2 <- products2[!duplicated(products2),]
prod_cat <- data.frame(product_code=c("p","v","x","q"), cat=c("Smartphone","TV","Laptop","Tablet"))
names(products2)[2] <- "prodcode"
products2 <- separate(products2,"prodcode",c("product_code","product_number"),sep="-")
left_join(products2,prod_cat) # joining by product_code
products2 <- products2 %>% mutate(full_address = paste(address,city,country,sep=", "))
# create dummy variables for company and product categories
products2 <- products2 %>% mutate(company_philips = company == "philips")
products2 <- products2 %>% mutate(company_akzo = company == "akzo")
products2 <- products2 %>% mutate(company_van_houten = company == "van houten")
products2 <- products2 %>% mutate(company_unilever = company == "unilever")
products2 <- products2 %>% mutate(product_smartphone = product_code == "p")
products2 <- products2 %>% mutate(product_tv = product_code == "v")
products2 <- products2 %>% mutate(product_laptop = product_code == "x")
products2 <- products2 %>% mutate(product_tablet = product_code == "q")
# create 'refine_clean.csv' file
write.table(products2,file="refine_clean.csv",sep = "| ", row.names=FALSE,qmethod="double")
write.table(products2,file="refine_clean.csv",sep = ", ", row.names=FALSE,qmethod="escape")
write.table(products2,file="refine_clean.csv",quote=TRUE,sep = ", ", row.names=FALSE,qmethod="double")
write.table(products2,file="refine_clean.csv",quote=TRUE,sep = ", ", row.names=FALSE,qmethod="double")
write.table(products2,file="refine_clean.csv",sep = "\n", row.names=FALSE,qmethod="escape")
write.table(products2,file="refine_clean.csv",sep = "\n", row.names=FALSE,qmethod="escape")
write.table(products2,file="refine_clean.csv",sep = "\t", row.names=FALSE,qmethod="escape")
write.table(products2,file="refine_clean.csv",sep = "\t", row.names=FALSE,qmethod="double")
write.table(products2,file="refine_clean.csv",sep = ",", row.names=FALSE,qmethod="escape", quote=TRUE)
